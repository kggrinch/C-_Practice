// Tree - a non-linear data structure where nodes are organized in a hierarchy.
        //        Ex: family tree, file explorer, databases, DNS, html dOC.

        //-------------------------------- Tree Example--------------------------------------

        //                                (Root Node)
        //                               /           \
        //                              /             \
        //                       (Branch Node)     (Branch Node)
        //                        /      \           /      \
        //                       /        \         /        \
        //              (Leaf Node) (Leaf Node)  (LeafNode) (Leaf Node)
        //-----------------------------------------------------------------------------------


        // Terminology - 1. Node = A node is a basic unit of a data structure that contains some sort of
        //                         data plus some other form of reference like to another node.

        //               2. Edge = A edge is the link between two nodes. Edges define how nodes are related and how
        //                         data flows or connects within a structure.

        //               3. Root Node = The top node of a tree is known as the root node. Does not have any
        //                              incoming edges only outgoing edges.

        //               2. Leaf Node = Nodes at the bottom of the tree are known as leaf nodes. Does not have outgoing
        //                              edges only incoming edges.

        //               3. Branch Node = Nodes in the middle of a tree are known as branch nodes. They have both
        //                                outgoing and incoming edges.

        //               4. Parent = Nodes with outgoing edges are known as parent nodes.
        //                           Nodes can be both child and parent simultaneously

        //               5. Child = Nodes with incoming edges are known as child nodes.
        //                          Nodes can be both child and parent simultaneously

        //               6. Sibling = Nodes that share the same parent are known as sibling nodes

        //               7. Subtree = A subtree is a smaller tree held within a larger tree
        //                            Example:          A         B  - subtree of A
        //                                             / \       / \
        //                                            B   C     D   E
        //                                           / \   \
        //                                          D   E   F

        //               8. Size = The size of a tree is equal to the number of nodes in the tree.

        //               9. Depth = The depth of a tree is equal to the number of edges below the root node.

        //               10. Height = The height of a tree is the number of nodes on longest path from root to a leaf, counting root as 1.
        //                            - If n is the root, then the tree has a height of 1
        //                            - If n is not the root, then the tree has a height greater than 1
        //                            - If the tree has no nodes and is empty, then the tree has a height of 0.
        //
        //                            Example:          A     Level 1
        //                            This tree has    / \
        //                            a height of 3   B   C   Level 2
        //                                           / \   \
        //                                          D   E   F Level 3

        //               11. Ancestor = A node is an ancestor of another if there is a direct pat from the ancestor to
        //                              the other node (moving only upward in the tree). Ex: a->b->c, a is an ancestor of c.

        //               12. Descendant = A node is a descendant of another if there is a direct path from the other node to it
                                          (moving only downward in the tree | reverse of ancestor). Ex: a->b->c, c is a descendant of a.

        //               13. N-ary Tree = A tree in which each node can have at most N children. Ex: A ternary tree (3-ary tree) allows each
                                          node to have up to 3 children.

                         14. General Tree - Set T of one or more nodes and is partitioned into disjoint subsets

        //               14. Binary Tree = A tree in which each node has at most two children, typically referred to as the left child and right child.

        //               15. Full Binary Tree = A binary tree where every node has either zero or two children.
        //                      Example:
        //                                               4
        //                                             /   \
        //                                            2     6 
        //                                           / \   / \
        //                                          1   3  5   7                


        //               16. Complete Binary Tree = A tree is considered complete if its either empty or a binary tree of height h that is
        //                                      full down to level h - 1, with level h filled in from left to right and has no gaps.

        //                                      Formally a binary tree T of height h is complete if:
        //                                      - All nodes at level h - 2 and above have two children each, and
        //                                      - When a node at level h - 1 has children, all nodes to its left at the same
        //                                        level have two children each, and
        //                                      - When a node at level h - 1 has one child, it is a left child. (only one h - 1 node can have one left child)

        //                            Example:  This is a complete binary tree of height 4.
        //                                               4
        //                                             /   \
        //                                            2     6  (h - 2) nodes each have two children each
        //                                           / \   / \
        //                                          1   3  5   7 (h - 1) nodes have no children, except one left child
        //                                         /
        //                                        0

        //                            Example:  This is not a complete binary tree of height 4.
        //                                              26
        //                                             /  \
        //                                            23   70 (h - 2) node does not have two children each
        //                                           / \
        //                                          5   24    (h - 1) has no twp children each which is fine but its has one right child
        //                                                \           which is not fine.
        //                                                 25

        //             16. Node calculations using height of tree.
        //                 Level = Height
        //                 # of nodes at given height = 2^(h - 1)
        //                 # of nodes at given height + previous heights = 2^h - 1


        //             Remove node from tree:
        //                    1. leaf node - remove leaf node
        //                    2. Node has one child - parent of remove node skips remove node and goes to remove nodes child
        //                    3. Node has two children
        //                           - remove from the left get the max
        //                           - remove from the right get the min

        //            17. Saving a tree to a file
        //                1. Save the list of values in pre-order traversal
        //                2. Add the values back in to the tree using a recursive method saving the middle values

        //            18. Tree sort = in order traversal of a tree.

        